"""
The driver file for confocal_browser.py
confocal_browser.py should not be edited by the user
confocal_browser.ui is generated by Qt Designer, and not to be text-edited
"""

import os
import sys

# import ui files
import confocal_browser

import numpy as np
from PyQt5 import QtGui, QtCore, QtWidgets
import pyqtgraph as pg
import scipy.io
import functools
import file_utils as fu


def my_excepthook(type, value, tback):
    sys.__excepthook__(type, value, tback)


sys.excepthook = my_excepthook


class ConfocalBrowser(QtWidgets.QMainWindow, confocal_browser.Ui_MainWindow):
    def __init__(self):
        # constructor from QMainWindow parent class
        super(self.__class__,self).__init__()
        # configure PyQTgraph to use white background
        pg.setConfigOption('background', 'w')
        pg.setConfigOption('foreground', 'k')
        # setupUi sits in exptdesign, as defined by Qt Designer
        self.setupUi(self)

        self.setFixedSize(self.size())
        self.setWindowFlags(QtCore.Qt.WindowCloseButtonHint | QtCore.Qt.WindowMinimizeButtonHint)
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        # this will ensure that the application quits at the right time,
        # and that Qt has a chance to automatically delete all the children of the top-level window
        # before the python garbage-collector gets to work.
        # http://stackoverflow.com/questions/27131294/error-qobjectstarttimer-qtimer-can-only-be-used-with-threads-started-with-qt

        # Create PyQtGraph plots and histogram for confocal scans
        colors = np.array([[0, 0, 0, 1], [1, 0, 0, 1], [1, 1, 0, 1.0]])
        cm = pg.ColorMap([0, 0.5, 1], colors)

        for name in ['confocal_1', 'confocal_2']:
            setattr(self, 'vb_%s' % name, pg.ViewBox())
            setattr(self, 'plt_%s' % name, pg.PlotItem(viewBox=getattr(self, 'vb_%s' % name)))
            setattr(self, 'qtimg_%s' % name, pg.ImageItem())
            getattr(self, 'vb_%s' % name).addItem(getattr(self, 'qtimg_%s' % name))

            setattr(self, 'glw_%s' % name, pg.GraphicsLayoutWidget())
            getattr(self, 'glw_%s' % name).addItem(getattr(self, 'plt_%s' % name), 0, 0)
            setattr(self, 'hlw_%s' % name, CustomLUTWidget(image=getattr(self, 'qtimg_%s' % name)))
            getattr(self, 'hlw_%s' % name).gradient.setColorMap(cm)
            getattr(self, '%s_grid' % name).addWidget(getattr(self, 'glw_%s' % name), 0, 0)
            getattr(self, '%s_grid' % name).addWidget(getattr(self, 'hlw_%s' % name), 0, 1)

        self.confocal_1_pnt1_cursor = pg.ScatterPlotItem(pen=pg.mkPen('g', width=2), brush=None, symbol='o', size=7)
        self.confocal_1_pnt1_cursor.setData([0], [0])
        self.confocal_1_pnt2_cursor = pg.ScatterPlotItem(pen=pg.mkPen('b', width=2), brush=None, symbol='o', size=7)
        self.confocal_1_pnt2_cursor.setData([1], [0])

        self.plt_confocal_1.addItem(self.confocal_1_pnt1_cursor)
        self.plt_confocal_1.addItem(self.confocal_1_pnt2_cursor)

        self.confocal_1_pnt1_vLine = pg.InfiniteLine(angle=90, movable=False, pen=pg.mkPen('g'))
        self.confocal_1_pnt1_hLine = pg.InfiniteLine(angle=0, movable=False, pen=pg.mkPen('g'))
        self.confocal_1_pnt1_vLine.hide()
        self.confocal_1_pnt1_hLine.hide()

        self.plt_confocal_1.addItem(self.confocal_1_pnt1_vLine, ignoreBounds=True)
        self.plt_confocal_1.addItem(self.confocal_1_pnt1_hLine, ignoreBounds=True)

        self.confocal_1_pnt2_vLine = pg.InfiniteLine(angle=90, movable=False, pen=pg.mkPen('b'))
        self.confocal_1_pnt2_hLine = pg.InfiniteLine(angle=0, movable=False, pen=pg.mkPen('b'))
        self.confocal_1_pnt2_vLine.hide()
        self.confocal_1_pnt2_hLine.hide()

        self.plt_confocal_1.addItem(self.confocal_1_pnt2_vLine, ignoreBounds=True)
        self.plt_confocal_1.addItem(self.confocal_1_pnt2_hLine, ignoreBounds=True)

        self.confocal_1_btn_browse.clicked.connect(self.confocal_1_browse)
        self.confocal_2_btn_browse.clicked.connect(self.confocal_2_browse)

        self.confocal_1_chkbx_transpose.stateChanged.connect(functools.partial(self.set_transpose, 1))
        self.confocal_1_chkbx_invX.stateChanged.connect(functools.partial(self.set_invX, 1))
        self.confocal_1_chkbx_invY.stateChanged.connect(functools.partial(self.set_invY, 1))

        self.confocal_2_chkbx_transpose.stateChanged.connect(functools.partial(self.set_transpose, 2))
        self.confocal_2_chkbx_invX.stateChanged.connect(functools.partial(self.set_invX, 2))
        self.confocal_2_chkbx_invY.stateChanged.connect(functools.partial(self.set_invY, 2))

        self.confocal_1_btn_pnt1.clicked.connect(functools.partial(self.pnt_select, 1, 1))
        self.confocal_1_btn_pnt2.clicked.connect(functools.partial(self.pnt_select, 1, 2))
        self.confocal_2_btn_pnt1.clicked.connect(functools.partial(self.pnt_select, 2, 1))
        self.confocal_2_btn_pnt2.clicked.connect(functools.partial(self.pnt_select, 2, 2))

        self.confocal_2_pnt1_cursor = pg.ScatterPlotItem(pen=pg.mkPen('g', width=2), brush=None, symbol='o', size=7)
        self.confocal_2_pnt1_cursor.setData([0], [0])
        self.confocal_2_pnt2_cursor = pg.ScatterPlotItem(pen=pg.mkPen('b', width=2), brush=None, symbol='o', size=7)
        self.confocal_2_pnt2_cursor.setData([1], [0])

        self.plt_confocal_2.addItem(self.confocal_2_pnt1_cursor)
        self.plt_confocal_2.addItem(self.confocal_2_pnt2_cursor)

        self.confocal_2_pnt1_vLine = pg.InfiniteLine(angle=90, movable=False, pen=pg.mkPen('g'))
        self.confocal_2_pnt1_hLine = pg.InfiniteLine(angle=0, movable=False, pen=pg.mkPen('g'))
        self.confocal_2_pnt1_vLine.hide()
        self.confocal_2_pnt1_hLine.hide()

        self.plt_confocal_2.addItem(self.confocal_2_pnt1_vLine, ignoreBounds=True)
        self.plt_confocal_2.addItem(self.confocal_2_pnt1_hLine, ignoreBounds=True)

        self.confocal_2_pnt2_vLine = pg.InfiniteLine(angle=90, movable=False, pen=pg.mkPen('b'))
        self.confocal_2_pnt2_hLine = pg.InfiniteLine(angle=0, movable=False, pen=pg.mkPen('b'))
        self.confocal_2_pnt2_vLine.hide()
        self.confocal_2_pnt2_hLine.hide()

        self.plt_confocal_2.addItem(self.confocal_2_pnt2_vLine, ignoreBounds=True)
        self.plt_confocal_2.addItem(self.confocal_2_pnt2_hLine, ignoreBounds=True)

        self.confocal_1_table_nvlist.setColumnCount(4)
        self.confocal_1_table_nvlist.setHorizontalHeaderLabels(['x', 'y', 'z', 'notes'])
        self.confocal_1_btn_load.clicked.connect(functools.partial(self.load_nvlist, 1))
        self.confocal_1_btn_save.clicked.connect(functools.partial(self.save_nvlist, 1))

        self.confocal_2_table_nvlist.setColumnCount(4)
        self.confocal_2_table_nvlist.setHorizontalHeaderLabels(['x', 'y', 'z', 'notes'])
        self.confocal_2_btn_calculate.clicked.connect(self.calculate_newpos)
        self.confocal_2_btn_save.clicked.connect(functools.partial(self.save_nvlist, 2))

        self.confocal_1_map_nvlist = pg.ScatterPlotItem(pen=pg.mkPen((0, 150, 100), width=2), brush=None, symbol='o', size=7)
        self.confocal_1_map_nvlist.setData([], [])
        self.confocal_2_map_nvlist = pg.ScatterPlotItem(pen=pg.mkPen((0, 150, 100), width=2), brush=None, symbol='o', size=7)
        self.confocal_2_map_nvlist.setData([], [])

        self.plt_confocal_1.addItem(self.confocal_1_map_nvlist)
        self.plt_confocal_2.addItem(self.confocal_2_map_nvlist)

        self.confocal_1_nvlabels = []  # for storing NV numbers
        self.confocal_2_nvlabels = []  # for storing NV numbers

        self.confocal_1_label.setText('')
        self.confocal_2_label.setText('')

    def calculate_newpos(self):

        # new code: 03/05/18 Peace
        old_x1 = self.confocal_1_pnt1_x.value()
        old_y1 = self.confocal_1_pnt1_y.value()
        old_x2 = self.confocal_1_pnt2_x.value()
        old_y2 = self.confocal_1_pnt2_y.value()

        new_x1 = self.confocal_2_pnt1_x.value()
        new_y1 = self.confocal_2_pnt1_y.value()
        new_x2 = self.confocal_2_pnt2_x.value()
        new_y2 = self.confocal_2_pnt2_y.value()

        # assuming pt1 is origin
        old_theta = np.arctan2((old_y2 - old_y1), (old_x2 - old_x1))
        new_theta = np.arctan2((new_y2 - new_y1), (new_x2 - new_x1))
        diff_theta = new_theta - old_theta

        diff_x = new_x1 - old_x1
        diff_y = new_y1 - old_y1

        scale_factor = np.sqrt((new_x2 - new_x1)**2 + (new_y2 - new_y1)**2) / np.sqrt((old_x2 - old_x1)**2 + (old_y2 - old_y1)**2)

        self.confocal_2_table_nvlist.setRowCount(self.confocal_1_table_nvlist.rowCount())

        # loop through all the NVs in the list
        for nvref_row in range(self.confocal_1_table_nvlist.rowCount()):
            # do a linear shift
            x_new = float(self.confocal_1_table_nvlist.item(nvref_row, 0).text()) + diff_x
            y_new = float(self.confocal_1_table_nvlist.item(nvref_row, 1).text()) + diff_y
            z_new = float(self.confocal_1_table_nvlist.item(nvref_row, 2).text())

            # if distance is farther than 1um from pt1, do a rotation, otherwise ignore it to avoid small distance error
            if np.sqrt((x_new - new_x1)**2 + (y_new - new_y1)**2) > 1.0:
                x_new = new_x1 + ((x_new - new_x1) * np.cos(diff_theta) - (y_new - new_y1) * np.sin(diff_theta)) * scale_factor
                y_new = new_y1 + ((x_new - new_x1) * np.sin(diff_theta) + (y_new - new_y1) * np.cos(diff_theta)) * scale_factor

            self.confocal_2_table_nvlist.setItem(nvref_row, 0, QtGui.QTableWidgetItem('%.3f' % x_new))
            self.confocal_2_table_nvlist.setItem(nvref_row, 1, QtGui.QTableWidgetItem('%.3f' % y_new))
            self.confocal_2_table_nvlist.setItem(nvref_row, 2, QtGui.QTableWidgetItem('%.3f' % z_new))
            self.confocal_2_table_nvlist.setItem(nvref_row, 3,
                                                 QtGui.QTableWidgetItem(self.confocal_1_table_nvlist.item(nvref_row, 3).text()))

        self.disp_nvlist(2)
        self.statustext.clear()
        self.statustext.append('XY Offset: (%.3f, %.3f)' % (diff_x, diff_y))
        self.statustext.append('Rotation: %.2f degree' % (diff_theta/np.pi*180))
        self.statustext.append('Scaling Factor: %.3f' % scale_factor)

    def calculate_offset(self):

        # set first NV to origin
        x_0 = self.confocal_1_pnt1_x.value()
        y_0 = self.confocal_1_pnt1_y.value()

        # print(x_0)
        # print(y_0)

        self.offset_box_x.setValue(x_0)
        self.offset_box_y.setValue(y_0)
        pg.QtGui.QApplication.processEvents()

    def confocal_1_browse(self):
        documents_path = os.path.expanduser(os.path.join('~', 'Documents', 'data_mat'))
        fd = QtGui.QFileDialog(directory=documents_path)
        targetfile = fd.getOpenFileName(filter='mat files (*.mat)')[0]

        if targetfile != '':
            matfile = scipy.io.loadmat(targetfile)
            self.confocal_1_label.setText(os.path.relpath(targetfile, documents_path))
            self.confocal_1_xvals = matfile['xvals'][0]
            self.confocal_1_yvals = matfile['yvals'][0]
            self.confocal_1_pl = np.squeeze(matfile['pl'])
            self.update_confocal(1)

    def confocal_2_browse(self):
        documents_path = os.path.expanduser(os.path.join('~', 'Documents', 'data_mat'))
        fd = QtGui.QFileDialog(directory=documents_path)
        targetfile = fd.getOpenFileName(filter='mat files (*.mat)')[0]

        if targetfile != '':
            matfile = scipy.io.loadmat(targetfile)
            self.confocal_2_label.setText(os.path.relpath(targetfile, documents_path))
            self.confocal_2_xvals = matfile['xvals'][0]
            self.confocal_2_yvals = matfile['yvals'][0]
            self.confocal_2_pl = np.squeeze(matfile['pl'])
            self.update_confocal(2)

    # num is confocal number
    def load_nvlist(self, num):
        documents_path = os.path.expanduser(os.path.join('~', 'Documents\\'))
        fd = QtGui.QFileDialog(directory=documents_path)
        targetfile = fd.getOpenFileName(filter='csv files (*.csv)')[0]

        if targetfile != '':
            fu.csv2table(getattr(self, 'confocal_%d_table_nvlist' % num), targetfile)

        self.disp_nvlist(num)

    # num is confocal number
    def disp_nvlist(self, num):
        numrows = getattr(self, 'confocal_%d_table_nvlist' % num).rowCount()

        numlabels = len(getattr(self, 'confocal_%d_nvlabels' % num))

        # add more label objects if necessary
        if numrows > numlabels:
            for i in range(numrows - numlabels):
                getattr(self, 'confocal_%d_nvlabels' % num).append(pg.TextItem(str(numlabels+i+1), color='w', anchor=(0.2, 0.8)))
                getattr(self, 'plt_confocal_%d' % num).addItem(getattr(self, 'confocal_%d_nvlabels' % num)[numlabels+i])

        for label in getattr(self, 'confocal_%d_nvlabels' % num):
            label.hide()
        xlist = []
        ylist = []

        if numrows != 0:
            for nvind in range(numrows):
                xval = float(getattr(self, 'confocal_%d_table_nvlist' % num).item(nvind, 0).text())
                yval = float(getattr(self, 'confocal_%d_table_nvlist' % num).item(nvind, 1).text())

                getattr(self, 'confocal_%d_nvlabels' % num)[nvind].show()
                getattr(self, 'confocal_%d_nvlabels' % num)[nvind].setPos(xval, yval)

                xlist.append(xval)
                ylist.append(yval)

        getattr(self, 'confocal_%d_map_nvlist' % num).setData(xlist, ylist)
        pg.QtGui.QApplication.processEvents()

    def save_nvlist(self, num):
        documents_path = os.path.expanduser(os.path.join('~', 'Documents\\'))
        fd = QtGui.QFileDialog(directory=documents_path)
        fd.setAcceptMode(1)

        targetfile = fd.getSaveFileName(filter='csv file (*.csv)')[0]
        if targetfile != '':
            fu.table2csv(getattr(self, 'confocal_%d_table_nvlist' % num), targetfile)

    def update_confocal(self, num, transpose=False, xinv=False, yinv=False):
        xvals = getattr(self, 'confocal_%d_xvals' % num)
        yvals = getattr(self, 'confocal_%d_yvals' % num)
        pl = getattr(self, 'confocal_%d_pl' % num)

        if not transpose:
            start_x = xvals[0]
            stop_x = xvals[-1]
            start_y = yvals[0]
            stop_y = yvals[-1]
            getattr(self, 'qtimg_confocal_%d' % num).setImage(pl)
            getattr(self, 'plt_confocal_%d' % num).setLabels(bottom='xpos (&mu;m)', left='ypos (&mu;m)')
        else:
            start_x = yvals[0]
            stop_x = yvals[-1]
            start_y = xvals[0]
            stop_y = xvals[-1]
            getattr(self, 'qtimg_confocal_%d' % num).setImage(np.transpose(pl))
            getattr(self, 'plt_confocal_%d' % num).setLabels(bottom='ypos (&mu;m)', left='xpos (&mu;m)')

        getattr(self, 'hlw_confocal_%d' % num).setImageItem(getattr(self, 'qtimg_confocal_%d' % num))
        name = 'confocal_%d' % num
        qtimg = getattr(self, 'qtimg_%s' % name)
        qtimg.resetTransform()  # need to call this. otherwise pos and scale are relative to previous
        qtimg.setPos(start_x, start_y)
        scale_x = (stop_x - start_x)/(qtimg.image.shape[0])
        scale_y = (stop_y - start_y)/(qtimg.image.shape[1])
        qtimg.scale(scale_x, scale_y)

        pg.QtGui.QApplication.processEvents()

    def set_transpose(self, num, state):
        self.update_confocal(num, transpose=state)

    def set_invX(self, num, state):
        if not getattr(self, 'confocal_%d_chkbx_transpose' % num).isChecked():
            getattr(self, 'plt_confocal_%d' % num).invertX(state)
        else:
            getattr(self, 'plt_confocal_%d' % num).invertY(state)
        pg.QtGui.QApplication.processEvents()

    def set_invY(self, num, state):
        if not getattr(self, 'confocal_%d_chkbx_transpose' % num).isChecked():
            getattr(self, 'plt_confocal_%d' % num).invertY(state)
        else:
            getattr(self, 'plt_confocal_%d' % num).invertX(state)
        pg.QtGui.QApplication.processEvents()

    # num is confocal number and num2 is point number
    def pnt_select(self, num, num2):

        if getattr(self, 'confocal_%d_btn_pnt%d' % (num, num2)).styleSheet() != 'background-color: green':
            # enable the cursor
            getattr(self, 'confocal_%d_btn_pnt%d' % (num, num2)).setStyleSheet('background-color: green')
            self.pnt_connect(self.pnt_set, num, num2)


        else:
            # disable the cursor here
            getattr(self, 'confocal_%d_btn_pnt%d' % (num, num2)).setStyleSheet('background-color: none')
            self.pnt_disconnect(num, num2)

    def pnt_mouseMoved(self, num, num2, pos):
        if getattr(self, 'plt_confocal_%d' % num).sceneBoundingRect().contains(pos):
            mousePoint =  getattr(self, 'vb_confocal_%d' % num).mapSceneToView(pos)
            getattr(self, 'confocal_%d_pnt%d_vLine' % (num, num2)).setPos(mousePoint.x())
            getattr(self, 'confocal_%d_pnt%d_hLine' % (num, num2)).setPos(mousePoint.y())

    def pnt_set(self, num, num2, event):
        pos = event.scenePos()
        if getattr(self, 'plt_confocal_%d' % num).sceneBoundingRect().contains(pos) and event.button() == 1:
            mousePoint = getattr(self, 'vb_confocal_%d' % num).mapSceneToView(pos)
            getattr(self, 'confocal_%d_pnt%d_cursor' % (num, num2)).setData([mousePoint.x()], [mousePoint.y()])
            getattr(self, 'confocal_%d_pnt%d_x' % (num, num2)).setValue(mousePoint.x())
            getattr(self, 'confocal_%d_pnt%d_y' % (num, num2)).setValue(mousePoint.y())
            self.pnt_disconnect(num, num2)
            pg.QtGui.QApplication.processEvents()

    def pnt_connect(self, clicked_func, num, num2):
        getattr(self, 'confocal_%d_pnt%d_vLine' % (num, num2)).show()
        getattr(self, 'confocal_%d_pnt%d_hLine' % (num, num2)).show()
        getattr(self, 'plt_confocal_%d' % num).scene().sigMouseMoved.connect(functools.partial(self.pnt_mouseMoved, num, num2))
        getattr(self, 'plt_confocal_%d' % num).scene().sigMouseClicked.connect(functools.partial(clicked_func, num, num2))

    def pnt_disconnect(self, num, num2):
        getattr(self, 'confocal_%d_pnt%d_vLine' % (num, num2)).hide()
        getattr(self, 'confocal_%d_pnt%d_hLine' % (num, num2)).hide()
        getattr(self, 'confocal_%d_btn_pnt%d' % (num, num2)).setStyleSheet('background-color: none')

        try:
            getattr(self, 'plt_confocal_%d' % num).scene().sigMouseMoved.disconnect()
        except TypeError:
            pass
        try:
            getattr(self, 'plt_confocal_%d' % num).scene().sigMouseClicked.disconnect()
        except TypeError:
            pass


class CustomLUTWidget(pg.GraphicsView):

    def __init__(self, parent=None, *args, **kargs):
        background = kargs.get('background', 'default')
        pg.GraphicsView.__init__(self, parent, useOpenGL=False, background=background)
        self.item = CustomLUTItem(*args, **kargs)
        self.setCentralItem(self.item)
        self.setSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Expanding)
        self.setMinimumWidth(56)

        self.gradient.rectSize = 7  # width of color bar
        self.gradient.tickSize = 5

    def sizeHint(self):
        return QtCore.QSize(50, 200)

    def setLabel(self, text=None, units=None, unitPrefix=None, **args):
        self.item.axis.setLabel(text=text, units=units, unitPrefix=unitPrefix, **args)
        self.setMinimumWidth(60)
        self.axis.setWidth(15)

    def __getattr__(self, attr):
        return getattr(self.item, attr)


import weakref


class CustomLUTItem(pg.HistogramLUTItem):
    def __init__(self, image=None, fillHistogram=True):
        super().__init__(image=image, fillHistogram=fillHistogram)
        self.vb.setMinimumWidth(10)  # width of the actual histogram
        self.vb.setContentsMargins(0.01, 0.01, 0.01, 0.01)

    def setImageItem(self, img_list):
        # allow setting array of images
        if type(img_list) is not list:
            self.imageItem = weakref.ref(img_list)
            img_list.sigImageChanged.connect(self.imageChanged)
            img_list.setLookupTable(self.getLookupTable)  ## send function pointer, not the result
            # self.gradientChanged()
            self.regionChanged()
        else:
            self.imageItem = []
            for img in img_list:
                self.imageItem.append(weakref.ref(img))
                img.sigImageChanged.connect(self.imageChanged)
                img.setLookupTable(self.getLookupTable)

            self.regionChanged()
        self.imageChanged(autoLevel=True)

    def gradientChanged(self):
        if self.imageItem is not None:
            if self.gradient.isLookupTrivial():
                lut = None  # lambda x: x.astype(np.uint8))
            else:
                lut = self.getLookupTable  ## send function pointer, not the result

            if type(self.imageItem) is not list:
                if self.imageItem() is not None:
                    self.imageItem().setLookupTable(lut)
            else:
                for img in self.imageItem:
                    img().setLookupTable(lut)

        self.lut = None
        # if self.imageItem is not None:
        # self.imageItem.setLookupTable(self.gradient.getLookupTable(512))
        self.sigLookupTableChanged.emit(self)

    def regionChanged(self):
        if self.imageItem is not None:
            if type(self.imageItem) is not list:
                if self.imageItem() is not None:
                    self.imageItem().setLevels(self.region.getRegion())
            else:
                for img in self.imageItem:
                    img().setLevels(self.region.getRegion())
        self.sigLevelChangeFinished.emit(self)

    def regionChanging(self):
        if self.imageItem is not None:
            if type(self.imageItem) is not list:
                if self.imageItem() is not None:
                    self.imageItem().setLevels(self.region.getRegion())
            else:
                for img in self.imageItem:
                    img().setLevels(self.region.getRegion())
        self.sigLevelsChanged.emit(self)
        self.update()

    def imageChanged(self, autoLevel=False, autoRange=False):
        targetHistogramSize = 100
        if type(self.imageItem) is not list:
            h = self.imageItem().getHistogram(targetHistogramSize=targetHistogramSize)
        else:
            # todo: get histogram from all images instead of just the first one
            mns = []
            mxs = []

            for img in self.imageItem:
                if img().image is not None:
                    mns.append(np.nanmin(img().image))
                    mxs.append(np.nanmax(img().image))

            if mns and mxs:
                mn = np.nanmin(mns)
                mx = np.nanmax(mxs)
            else:
                mn = 0.0
                mx = 1.0

            if all(img().image is not None for img in self.imageItem):
                bins = np.linspace(mn, mx, targetHistogramSize)
                hist_total = np.linspace(0, 0, targetHistogramSize)

                for img in self.imageItem:
                    image_array = img().image
                    hist = np.histogram(image_array[~np.isnan(image_array)], bins=np.linspace(mn, mx, targetHistogramSize+1))
                    hist_total += hist[0]

                h = [bins, hist_total]
            else:
                h = [None, None]

        if h[0] is None:
            return
        self.plot.setData(*h)

        if autoLevel:
            mn = h[0][0]
            mx = h[0][-1]
            self.region.setRegion([mn, mx])



def main():
    """Packaged main function that launches GUI"""
    app = QtGui.QApplication(sys.argv)
    form = ConfocalBrowser()
    form.show()
    # form.chkbox_tracktime.setChecked(False)
    # form.chkboxsave.setChecked(False)


    app.exec_()

if __name__ == '__main__':
    main()
